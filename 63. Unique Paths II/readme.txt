求从地图左上到达右下的路径数。

这是一道动态规划题，所以第一反应就是找递推关系。
思路：由于只能向右、向下移动，对于矩阵中的一个点d[i][j]，也只能通过它的左邻点、上邻点达到它。因此，对于某个点d[i][j]，到达他的路径数即为到达它左、上邻点的路径数之和。
递推关系：到达d[i][j]的路径数 = 到达d[i-1][j]的路径数 + 到达d[1][j-1]的路径数

本题和62.Unique Paths的区别是加入了障碍，因此要考虑更多的边界条件：
a.当起点和终点为障碍物时，视作不能到达，即路径数为0。
b.当起点和终点之间没有可达路径时，路径数为0。
c.当节点本身为障碍时，到达该节点的路径数为0。
d.当矩阵为一维矩阵时，单独处理:根据是否存在障碍物，路径数为0或1。
e.靠近上、左边界的点不适用递推关系，因此花费O(n)的时间单独计算，处理方式同d。//此处的操作不存在冗余，因为通过if语句，实际只处理一次

实际操作过程中，由于各种边界问题没有提前考虑，反反复复提交了14次，Orz。
其间很多次结果都是WA，原因是初始化矩阵的时候使用了memset函数:memset(dp,1,sizeof(dp))。（我想把矩阵初始化为1）
查阅资料得知，memset是对字节进行操作，所以int类型的执行结果是0x11111111，这也就是为什么WA的结果都是32385739这种大数，后来索性初始化为0了。

查错的过程还是想到哪改到哪，交上去又有新的错，难受。
最后的时间复杂度是(mn)。
